- 앱 테마 변경을 런타임에서 지원
앱 전체에 적용되는 themeColor를 전역 상태 관리자인 Zustand Store에 저장하고, listener를 통해 시스템 테마 변경 event를 수신하게 되면 store의 themeColor를 갱신한다. themeColor를 참조하고 있던 모든 컴포넌트들은 이 변경을 전파받게 되고, 바뀐 테마로 화면을 다시 렌더링함으로써 동적인 테마 변경을 구현하였다.

- react-query를 통한 서버 요청 캐싱
React Query를 사용해 서버 데이터의 상태 관리와 캐싱을 구현했다. 무한 스크롤이 필요한 데이터 리스트를 useInfiniteQuery로 관리하며, 페이징 처리를 통해 불필요한 네트워크 요청을 줄였다. React Query의 캐싱 메커니즘을 이용해 조회한 데이터를 캐싱하고, 동일한 데이터를 중복 요청하지 않도록 서버 응답과 캐시를 동기화하여 데이터의 일관성을 보장했다.

- sqlite를 통한 로컬 데이터베이스 관리 및 캐싱
서버 요청을 최소화하고 이미 존재하는 데이터를 효율적으로 관리하기 위해 SQLite를 이용해 캐싱을 구현했다. useDatabase라는 커스텀 React 훅을 만들어 SQLite를 활용한 로컬 DB 관리를 가능하게 했고, 훅 내부에서 waitForDb라는 Promise 기반 함수를 구현하여 데이터베이스 연결 상태를 비동기적으로 처리했다. 이 훅에서 테이블 생성, 데이터 삽입, 업데이트, 삭제 등 기본적인 CRUD 작업을 캡슐화해 코드 재사용성을 높였다.

- 오픈 그래프(Open Graph) 메타데이터 파싱
공동구매 글에서 링크 미리보기(preview) 기능을 구현하기 위해 사용자가 공유한 링크의 메타데이터를 가져오는 Open Graph 기능을 적용했다. 메타데이터 추출 중에는 Skeleton UI를 적용해 로딩 상태임을 나타내고, 해당 url에서 메타데이터를 가져오는 데 실패하는 예외상황을 고려해 추출 실패 시에는 링크를 기본 텍스트로 표시하도록 하여 UX를 개선했다.